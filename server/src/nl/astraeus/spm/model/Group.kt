package nl.astraeus.spm.model

import nl.astraeus.database.SimpleDao
import nl.astraeus.database.annotations.*
import nl.astraeus.spm.util.DateFormatter
import nl.astraeus.spm.util.Tokenizer
import java.util.*

/**
 * User: rnentjes
 * Date: 20-11-16
 * Time: 13:01
 */

@Table(name = "groups")
@Cache(maxSize = 5000)
data class Group(
  @Id(IdType.AUTOGENERATED) var id: Long = 0,
  @Index var user: String,
  var name: String,
  var opened: Boolean,

  @Index var parentGroup: Long,
  var created: Date,
  var updated: Date
) {
    constructor(): this(0, "", "", false, 0, Date(), Date())

    constructor(user: User, name: String, parentGroup: Long = 0): this(0, user.name, name, false, parentGroup, Date(), Date())

    fun tokenized(): String {
        val formatter = DateFormatter.get()

        return Tokenizer.tokenize("$id", user, name, "$opened", "$parentGroup", formatter.format(created), formatter.format(updated))
    }

    fun tokenizeForClient(): String {
        val result = StringBuilder()

        result.append("$id~${Tokenizer.escape(name)}~$opened")

        val children = GroupDao.findChildren(this)

        result.append("~${children.size}")

        for (child in children) {
            result.append("~")
            result.append(child.tokenizeForClient())
        }

        return result.toString()
    }
}

object GroupDao: SimpleDao<Group>(Group::class.java) {

    fun findRootGroupOfUser(name: String) = find("user = ? and parentGroup = 0", name)

    fun findByUser(name: String) = where("user = ?", name)

    fun findChildren(parent: Group) = where("parentGroup = ? ORDER BY id", parent.id)
}