package nl.astraeus.spm.model

import nl.astraeus.database.Dao
import nl.astraeus.database.annotations.*
import nl.astraeus.spm.util.DateFormatter
import nl.astraeus.spm.util.Tokenizer
import java.text.SimpleDateFormat
import java.util.*

/**
 * User: rnentjes
 * Date: 20-11-16
 * Time: 13:01
 */

@Table(name = "groups")
@Cache(maxSize = 5000)
data class Group(
  @Id(IdType.AUTOGENERATED) var id: Long = 0,
  @Index var user: String,
  var name: String,

  @Index var parentGroup: Long,
  var created: Date,
  var updated: Date
) {
    constructor(): this(0, "", "", 0, Date(), Date())

    constructor(user: User, name: String, parentGroup: Long = 0): this(0, user.name, name, parentGroup, Date(), Date())

    constructor(tk: Tokenizer): this(
      tk.next().toLong(),
      tk.next(),
      tk.next(),
      0,
      Date(),
      Date()
      ) {
        val formatter = DateFormatter.get()
        val parentId = tk.next()

        if (parentId.isBlank()) {
            parentGroup = 0
        } else {
            parentGroup = parentId.toLong()
        }

        created = formatter.parse(tk.next())
        updated = formatter.parse(tk.next())
    }

    fun tokenized(): String {
        val formatter = DateFormatter.get()

        return Tokenizer.tokenize("$id", user, name, "$parentGroup", formatter.format(created), formatter.format(updated))
    }

    fun tokenizeForClient(): String {
        val result = StringBuilder()

        result.append("$id~${Tokenizer.escape(name)}")

        val children = GroupDao.findChildren(this)

        result.append("~${children.size}")

        for (child in children) {
            result.append("~")
            result.append(child.tokenizeForClient())
        }

        return result.toString()
    }
}

object GroupDao: Dao<Group>(Group::class.java) {

    fun findRootGroupOfUser(name: String) = find("user = ? and parentGroup = 0", name)

    fun findByUser(name: String) = where("user = ?", name)

    fun findChildren(parent: Group) = where("parentGroup = ?", parent.id)
}

fun main(args: Array<String>) {
    val group = Group(0, "name", "parent", -1, Date(), Date())

    val tokenized = group.tokenized()

    println("Tokenized: $tokenized")

    val tokenizer = Tokenizer(tokenized)

    println("Parsed: ${Group(tokenizer)}")
}
